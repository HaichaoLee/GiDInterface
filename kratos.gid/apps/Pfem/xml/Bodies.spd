<?xml version="1.0" encoding="utf-8"?>
<container n="Bodies" pn="Bodies" un="PFEM_Bodies" icon="bodies" help="Select your group" open_window="0">
  <blockdata n='Body' name='Body1' icon="select" editable="false" sequence='1' editable_name='unique' open_window="0">
    <value n="BodyType" pn="Body type" icon="data" v="" values="[GetBodyTypeValues]" actualize_tree="1">
      <dependencies value='Rigid' node="../value[@n='MeshingStrategy']" att1='v' v1='No remesh' />
      <dependencies value='Fluid' node="../value[@n='MeshingStrategy']" att1='v' v1='Remesh and Refine' />
      <dependencies node="../value" actualize="1"/>
      <dependencies node="../condition/value" actualize="1"/>
    </value>
    <value n="MeshingStrategy" pn="Meshing strategy" icon="data" v="" values="[GetMeshingDomains]" state="[getStateFromXPathValue {string(../value[@n='BodyType']/@v)} Fluid,Solid]"/>
    <value n="ContactStrategy" pn="Contact strategy" icon="data" v="" values="[GetContactDomains]" state="[getStateFromXPathValue {string(../value[@n='BodyType']/@v)} Solid,Rigid]" />
    <condition n='BodyRigidParts' pn='Rigid parts' icon="bodies" groups_icon="groupCreated" ov="line,surface,volume" state="[getStateFromXPathValue {string(../value[@n='BodyType']/@v)} Rigid]">
      <value n="Element" pn="Element" actualize_tree="1" v="" values="[GetElementsValues ElementType Rigid]" dict="[GetElementsDict]" state="normal">
        <dependencies node="../value" actualize="1" />
      </value>
      <value n="ConstitutiveLaw" pn="Constitutive law" v="" actualize_tree="1" values="[GetConstitutiveLaws]" dict="[GetAllConstitutiveLaws]">
        <dependencies node="../value" actualize="1"/>
      </value>
      <dynamicnode command="spdAux::injectPartInputs" args=""/>
    </condition>
    <condition n='BodyFluidParts' pn='Fluid parts' icon="bodies" groups_icon="groupCreated" ov="surface,volume" state="[getStateFromXPathValue {string(../value[@n='BodyType']/@v)} Fluid]">
      <value n="Element" pn="Element" actualize_tree="1" values="[GetElementsValues ElementType Fluid]" v="" dict="[GetElementsDict]" state="normal">
        <dependencies node="../value" actualize="1" />
      </value>
      <value n="ConstitutiveLaw" pn="Constitutive law" v="" actualize_tree="1" values="[GetConstitutiveLaws]" dict="[GetAllConstitutiveLaws]">
        <dependencies node="../value" actualize="1"/>
      </value>
      <dynamicnode command="spdAux::injectPartInputs" args=""/>
    </condition>
    <condition n='BodySolidParts' pn='Solid parts' icon="bodies" groups_icon="groupCreated" ov="surface,volume" state="[getStateFromXPathValue {string(../value[@n='BodyType']/@v)} Solid]">
      <value n="Element" pn="Element" actualize_tree="1" values="[GetElementsValues ElementType Solid]" v="" dict="[GetElementsDict]" state="normal">
        <dependencies node="../value" actualize="1" />
      </value>
      <value n="ConstitutiveLaw" pn="Constitutive law" v="" actualize_tree="1" values="[GetConstitutiveLaws]" dict="[GetAllConstitutiveLaws]">
        <dependencies node="../value" actualize="1"/>
      </value>
      <dynamicnode command="spdAux::injectPartInputs" args=""/>
    </condition>
  </blockdata>
</container>
